"use strict";(self.webpackChunkflowsynx=self.webpackChunkflowsynx||[]).push([[1235],{3473:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=i(4848),r=i(8453);const t={sidebar_position:1},o="Overview",l={id:"overview",title:"Overview",description:"Getting started",source:"@site/docs/overview.mdx",sourceDirName:".",slug:"/overview",permalink:"/docs/overview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",next:{title:"Concepts",permalink:"/docs/concepts"}},a={},c=[{value:"Introduction to the FlowSynx",id:"introduction-to-the-flowsynx",level:2},{value:"Architecture overview",id:"architecture-overview",level:2},{value:"Intraction tools",id:"intraction-tools",level:3},{value:"FlowSynx Core",id:"flowsynx-core",level:3},{value:"Execution environments",id:"execution-environments",level:3}];function d(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)("div",{class:"cardsGrid",children:[(0,s.jsxs)("a",{class:"overview-card",href:"/docs/getting-started",children:[(0,s.jsx)("h3",{class:"overview-card-title",children:"Getting started"}),(0,s.jsx)("p",{class:"overview-card-description",children:"Read the comprehensive documentation to start building workflows."})]}),(0,s.jsxs)("a",{class:"overview-card",href:"https://github.com/flowsynx/samples",target:"_blank",children:[(0,s.jsx)("h3",{class:"overview-card-title",children:"Samples"}),(0,s.jsx)("p",{class:"overview-card-description",children:"Explore ready-to-use workflow examples and starter templates."})]}),(0,s.jsxs)("a",{class:"overview-card",href:"https://github.com/flowsynx/flowsynx",target:"_blank",rel:"noopener noreferrer",children:[(0,s.jsx)("h3",{class:"overview-card-title",children:"GitHub Repo"}),(0,s.jsx)("p",{class:"overview-card-description",children:"Browse the full source code, raise issues, and contribute."})]})]}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-the-flowsynx",children:"Introduction to the FlowSynx"}),"\n",(0,s.jsx)(n.p,{children:"FlowSynx is a flexible, plugin-driven, cross-platform .NET-based DAG workflow orchestration system,\ndesigned to automate, scale, and manage complex data workflows across cloud and on-premises environments.\nWritten in C# and built on .NET, FlowSynx bridges the gap between low-code accessibility and full-code\nextensibility, empowering developers and operations teams to define and execute powerful, declarative\nworkflows in a simple, consistent, and maintainable way."}),"\n",(0,s.jsxs)(n.p,{children:["With its modular plugin architecture and native C# SDK, FlowSynx supports seamless integration with\nexternal systems, custom business logic, cloud storage providers, databases, APIs, and more\u2014allowing\nusers to extend functionality without modifying the core engine. Workflows are represented as\nJSON-based ",(0,s.jsx)(n.a,{href:"/docs/concepts#directed-acyclic-graphs-dags",children:"DAGs (Directed Acyclic Graphs)"}),", enabling\nprecise control over ",(0,s.jsx)(n.a,{href:"/docs/concepts#task-dependencies--execution-order",children:"execution order, dependencies"}),",\n",(0,s.jsx)(n.a,{href:"/docs/concepts#retry-policies--error-handling",children:"retries & error handling"}),", and conditional logic."]}),"\n",(0,s.jsx)(n.p,{children:"FlowSynx features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:".NET-native, cross-platform execution, supporting Windows, Linux, macOS, and containerized deployments (Docker)"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic plugin loading and versioning using C# assemblies"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts#event-driven-execution--triggers",children:"Event-driven triggers"}),", ",(0,s.jsx)(n.a,{href:"/docs/concepts#human-in-the-loop-tasks",children:"human-in-the-loop tasks"}),", and full audit logging"]}),"\n",(0,s.jsx)(n.li,{children:"Integrated configuration, logging, and auditing, stored in a secure and pluggable backend"}),"\n",(0,s.jsx)(n.li,{children:"Role-based access control and per-user security settings"}),"\n",(0,s.jsx)(n.li,{children:"Support for hybrid deployments, enabling workflows to span both local infrastructure and remote cloud services"}),"\n",(0,s.jsx)(n.li,{children:"Full support for retry policies, failure handling, and stateful tracking of workflow execution"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether you\u2019re automating file transfers, orchestrating machine learning pipelines, syncing distributed systems, or building robust ETL jobs, FlowSynx\u2019s C# API and .NET foundation offer a scalable, extensible platform to accelerate workflow development and reduce operational complexity\u2014without sacrificing control."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture overview"}),"\n",(0,s.jsx)("img",{src:"/img/architecture-diagram.jpg"}),"\n",(0,s.jsx)(n.h3,{id:"intraction-tools",children:"Intraction tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CLI Interface"}),": Command-line tools written in .NET for interacting with FlowSynx, enabling workflow management and execution from terminals."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"REST API Gateway"}),": Provides secure, HTTP/HTTPS RESTful APIs to integrate with external systems, allowing remote workflow control and status querying."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SDK (Library)"}),": Developer-friendly .NET libraries exposing FlowSynx functionalities programmatically, enabling custom applications to embed or automate workflow operations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UI-Based Console Management"}),": Browser-based interface for real-time monitoring and administration of workflows and system settings, built with Blazor and .NET backend."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"flowsynx-core",children:"FlowSynx Core"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Workflow Orchestrator"}),": Loads and executes workflows defined as JSON DAGs with native C# execution."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugin Manager"}),": Dynamically loads C# plugins as assemblies and maintains a plugin marketplace/registry."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security & Authentication"}),": Handles authentication and authorization for both REST API and CLI access."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging & Auditing"}),": Tracks workflow execution, plugin activity, and audit trails."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Trigger Engine"}),": Listens for external events or schedules workflows to start based on timers, webhooks, or system signals."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error handling"}),": Built-in support for task retries, timeouts, and fallbacks ensures reliable execution even in unstable environments. Custom retry strategies can be defined per task."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"execution-environments",children:"Execution environments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment & Execution Environments"}),": Supports flexible deployment models from standalone desktop/server installs to cloud containerized orchestration, with full ",(0,s.jsx)(n.strong,{children:"cross-platform .NET runtime compatibility"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);