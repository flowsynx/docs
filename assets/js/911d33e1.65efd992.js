"use strict";(self.webpackChunkflowsynx=self.webpackChunkflowsynx||[]).push([[3782],{8325:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>h});var t=i(4848),o=i(8453);const r={sidebar_position:3,title:"Health",description:"The Health Check API in FlowSynx provides a simple way to verify whether the service is running and operational. It is commonly used for automated uptime monitoring, container orchestration probes (like Kubernetes liveness/readiness), or deployment verification."},s="FlowSynx Health Check API",l={id:"api/health",title:"Health",description:"The Health Check API in FlowSynx provides a simple way to verify whether the service is running and operational. It is commonly used for automated uptime monitoring, container orchestration probes (like Kubernetes liveness/readiness), or deployment verification.",source:"@site/docs/api/health.mdx",sourceDirName:"api",slug:"/api/health",permalink:"/docs/api/health",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Health",description:"The Health Check API in FlowSynx provides a simple way to verify whether the service is running and operational. It is commonly used for automated uptime monitoring, container orchestration probes (like Kubernetes liveness/readiness), or deployment verification."},sidebar:"docSidebar",previous:{title:"Config",permalink:"/docs/api/config"},next:{title:"Version",permalink:"/docs/api/version"}},a={},h=[{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:2},{value:"Configuration Requirement",id:"configuration-requirement",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Health Check Endpoint",id:"health-check-endpoint",level:2},{value:"<code>curl</code> Example",id:"curl-example",level:4},{value:"Example response",id:"example-response",level:4},{value:"Summary Table",id:"summary-table",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"flowsynx-health-check-api",children:"FlowSynx Health Check API"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Health Check API"})," in FlowSynx provides a simple way to verify whether the service is running and operational.\nIt is commonly used for automated uptime monitoring, container orchestration probes (like Kubernetes liveness/readiness),\nor deployment verification."]}),"\n",(0,t.jsx)(n.h2,{id:"authentication--authorization",children:"Authentication & Authorization"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"/health"})," endpoint is public (no authentication and authentication required)."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-requirement",children:"Configuration Requirement"}),"\n",(0,t.jsx)(n.p,{children:"This endpoint is conditionally available based on system configuration."}),"\n",(0,t.jsxs)(n.p,{children:["To enable the health check endpoint, the following setting ",(0,t.jsxs)(n.strong,{children:["must be present and set to ",(0,t.jsx)(n.code,{children:"true"})]})," in the system configuration file (e.g., ",(0,t.jsx)(n.code,{children:"appsettings.json"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "HealthCheck": {\n    "Enabled": true\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["If this configuration is not enabled, requests to the ",(0,t.jsx)(n.code,{children:"/health"})," endpoint will return:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"HTTP 404 Not Found"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"/health"})," endpoint is public (no authentication required)."]}),"\n",(0,t.jsx)(n.h2,{id:"health-check-endpoint",children:"Health Check Endpoint"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"GET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Endpoint"}),": ",(0,t.jsx)(n.code,{children:"/health"})]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"curl-example",children:[(0,t.jsx)(n.code,{children:"curl"})," Example"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://localhost:6262/health\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example-response",children:"Example response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "Status": "Healthy",\n  "HealthChecks": [\n    {\n      "Status": "Healthy",\n      "Component": "Configuration service",\n      "Description": "Configuration service is available"\n    },\n    {\n      "Status": "Healthy",\n      "Component": "Plugins service",\n      "Description": "Plugins service is available"\n    },\n    {\n      "Status": "Healthy",\n      "Component": "Logger service",\n      "Description": "Logger service is available"\n    }\n  ],\n  "HealthCheckDuration": "00:00:00.1137624"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Endpoint"}),(0,t.jsx)(n.th,{children:"Authentication"}),(0,t.jsx)(n.th,{children:"Authorization roles"}),(0,t.jsx)(n.th,{children:"Requires Config"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/health"})}),(0,t.jsx)(n.td,{children:"Not Required"}),(0,t.jsx)(n.td,{children:"Not Required"}),(0,t.jsx)(n.td,{children:"Yes"})]})})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);